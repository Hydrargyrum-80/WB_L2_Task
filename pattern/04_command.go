package pattern

/*
Command позволяет:
Разорвать жёсткую связь между тем, кто инициирует действие и тем, кто его будет
выполнять. Тот, кто инициирует, не обязан знать того, кто будет выполнять и наоборот.

Отложить, разнести во времени инициацию действия и его исполнение. Действия заготовлены заранее и отправлены по нужным адресатам. В час Х действие запускается
на выполнение, и в этот может уже даже может быть неизвестно, что это за действие.

Сохранять, загружать, логгировать, клонировать, универсально работать со всеми
действиями, не зная, что это конкретно за действия.

Добавлять новые действия, расширяя, а не изменяя существующий код.

Недостатком является повышенная сложность кода использующего данный паттерн
*/

// интерфейс команды
type Command interface {
	execute()
	undo()
}

type Point struct {
	x int
	y int
}

func (p *Point) Move(dx int, dy int) {
	p.x += dx
	p.y += dy
}

// конкретная команда
type MoveCommand struct {
	point *Point
	dx    int
	dy    int
}

// выполняем
func (c *MoveCommand) execute() {
	//можно "оборачивать" существующие методы в команды
	//c.point.Move(c.dx, c.dy)
	c.point.x += c.dx
	c.point.y += c.dy
}

// отменяем
func (c *MoveCommand) undo() {
	//c.point.Move(c.dx*-1, c.dy*-1)
	c.point.x -= c.dx
	c.point.y -= c.dy
}
